<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <Property1>Property1Value</Property1>
    <Property2>$(Property1)+Property2Value</Property2>
    <RspPath>$(MSBuildProjectDirectory)\*.rsp</RspPath>
  </PropertyGroup>

  <!--An item group that pulls in files-->
  <ItemGroup>
    <Rsps Include="$(RspPath)"/>
  </ItemGroup>
  
  <!--An item group to hold custom items-->
  <ItemGroup>
    <Staff Include="code1">
      <Name>Jane</Name>
      <Surname>Simpson</Surname>
    </Staff>
    <Staff Include="code2">
      <Name>Peter</Name>
      <Surname>Kleng</Surname>
    </Staff>
    <Staff Include="code3">
      <Name>Paul</Name>
      <Surname>Tinker</Surname>
    </Staff>
  </ItemGroup>

  <!--Accessing declared items-->
  <Target Name="ListRps">
    <Message Text="@(Rsps)"/>
    <Message Text="@(Rsps->'%(ModifiedTime)')"/>
  </Target>

  <!--Accessing a declared custom items-->
  <Target Name="ListStaff">
    <Message Text="@(Staff)"/>
    <Message Text="@(Staff->'%(Name)')"/>
    <Message Text="@(Staff->'%(Surname)')"/>
  </Target>

  <Target Name="ProcessCustomProperties">
    <Message Text="Property1 = $(Property1)"
             Importance="low"/>
    <Message Text="Property2 = $(Property2)"
             Importance="low"/>
  </Target>

  <Target Name="ProcessReservedProperties">
    <Message Text="LOGONSERVER = $(LOGONSERVER)"
             Importance="low"/>
    <Message Text="MSBuildProjectDirectory = $(MSBuildProjectDirectory)"
             Importance="low"/>
    <Message Text="MSBuildBinPath = $(MSBuildBinPath)"
             Importance="low"/>
  </Target>

</Project>

<!--

> msbuild 06.Items.msbuild @05.Items.rsp

In this example we use a combination of the techniques that have been examined so 
far in conjuction with the new ItemGroup.

1- some messages have been set to low importance so that are not shown in the output
   when the verbosity is set to normal despite thet fact that the respective Target
   element is executed.
   
2- A custom property <RspPath> is defined which is composed by the value of the 
   reserved property $(MSBuildProjectDirectory) and the search token *.rsp.
   
3- An <ItemGroup> is employed to pull in an array of items by means of the evaluation
   of a custom property <Rsps> which uses thet Include="$(RspPath)" to pull in all the
   *.rsp files that are found in the execution directory.
   
Important!

<Target Name="ListRps">
    <Message Text="@(Rsps)"/>
</Target>
  
4- The @ is used in this case instead of the $.

This is an important difference as @ causes not only the textual value of the custom 
property <Rsps> to be included in and made available to the MSBuild process at run time
but also the metadata associated with the included file item.

Conclusion 

<ItemGroup> intended use os top provide an array of items that may be used by MSBuild.
Items can be anything i.e. files as shown in this example. A list if the items that 
can be referenced in a *.msbuild script is found below.

Common MSBuild Project Items
https://msdn.microsoft.com/en-gb/library/bb629388.aspx

-->

<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
DefaultTargets="TestCustomTaskAddTwoNumbers;TestCustomTaskMultiplyTwoNumbers;TestCustomTaskDivideTwoNumbers">

  <!--
  In order for the MSBuild  project to work the reference to the other 
  assets must be imported. The <Import> declaration might also be used 
  in any of the other files that make up a MSBuild project i.e. the 
  Common.props may be imported by the Common.targets, etc.
  -->
  <Import Project="Common.targets"/>
  <Import Project="Common.props"/>
  
  <!--MSBuild Extension Pack Tasks-->
  <!--
  Remember to edit the MSBuild.ExtensionPack.tasks to change the $(ExtensionTasksPath) that must
  resolve to the folder where the binaries for the teasks in teh MSBuild extensions are on your 
  ayatem.
  -->
  <Import Project="C:\Program Files\MSBuildExtensionPack\4.0\MSBuild.ExtensionPack.tasks"/>

  <!--
  In this example a custom ITask implemetation is showcased.
  Import the task files that link to the assembly with the ITask custom implemetation.
  -->
  <Import Project=".\AddTwoNumbers.task"/>
  <Import Project=".\MultiplyTwoNumbers.task"/>
  <Import Project=".\DivideTwoNumbers.task"/>
  
  <Target Name="TestCustomTaskAddTwoNumbers">
    <AddTwoNumbers Number1="1" Number2="-3">
      <Output TaskParameter="Result"
              PropertyName="Sum"/>
    </AddTwoNumbers>
    <Message Text="AddTwoNumber result = $(Sum)"/>
  </Target>
  
  <Target Name="TestCustomTaskMultiplyTwoNumbers">
    <MultiplyTwoNumbers Number1="1" Number2="-3">
      <Output TaskParameter="Result"
              PropertyName="Product"/>
    </MultiplyTwoNumbers>
    <Message Text="MultiplyTwoNumbers result = $(Product)"/>
  </Target>

  <Target Name="TestCustomTaskDivideTwoNumbers">
    <DivideTwoNumbers Number1="1" Number2="-3">
      <Output TaskParameter="Result"
              PropertyName="Quotient"/>
    </DivideTwoNumbers>
    <Message Text="DivideTwoNumbers result = $(Quotient)"/>
  </Target>
  
  <!--These Targets make use of Tasks defined in the MSBuild Extension Pack imported above-->  
  <Target Name="PackageStuff">
    <ItemGroup>
      <FilesToZip Include=".\FilesToZip\*.*"/>
    </ItemGroup>
    <!--This task creates a zipped folder withsome files in it-->
    <MSBuild.ExtensionPack.Compression.DNZip 
      TaskAction="Create"
      CompressFiles="@(FilesToZip)"
      ZipFileName=".\zipped.zip"/>
  </Target>
  
  <!--
  Inheritance!
  The oder of the <Import> is significant. For example Targets can be 
  overwritten in files that are included last. Ulimately the *.proj 
  file can be use for such override as well.
  -->
  
  <!--*.proj is used to to mark the enty point of an MSBuild project-->
  <Target Name="EntryPoint" DependsOnTargets="ListRps;PackageStuff">
    <Message Text="This is the entry point Target" />
    <Message Text="Hello $(Author)" />
  </Target>    
  
</Project>


<!--
In order to run this project as usual run a Visual Studio Developer Shell 
in the folder of the *.proj file and use either.

> msbuild DoSomething.proj 
> msbuild DoSomething.proj @args.rsp

This project also show how to use the DependsOnTargets attribute on Target
elements to specify the order in which Targets are to be executed by MSBuild.
-->

Some facts on properties.

Declaring Properties and setting their value

Properties hold installation time data.
Properties are persisted for the duration of the whole istallation process.
Properties can be used to store and communicate state between the istallation phases.
Properties can be used to capture user input.
Properties and their values can be use in the installer logic to determine its control flow.
The default value of a property is NULL.
During the compilation process properties with NULL value are left out of teh MSI.
Properies are declared by means of the Property element.
Property can be declared and an optional value can be set as its attribute.
When a Property is declared its value does not have to be set.
The value of a declared property can be set after the declaration of the property.
Once the value of the property is set it CANNOT be changed - a build error would occur.
Properties can be set from command line.
Properties declared on the command line override those set in your WiX markup.
So, you could declare a WiX Property element in your XML to give it a default
value, then override that value from the command line.
Properties in WiX are not stronlgy typed.

----------------------------------------------------------------------------------------
When a property is set from command line it does not have to be declared in the markup.

msiexec /i myInstaller.msi PROPERTY1=100 PROPERTY2="my value"
----------------------------------------------------------------------------------------
You can clear a property by setting its value to an empty string

msiexec /i myInstaller.msi PROPERTY1=""
----------------------------------------------------------------------------------------

=============================================================================================

Referencing Properties

A property is usually referenced by attributes of another WiX element.
To reference a property in element attributes use square brackets around its Id i.e. [USERNAME] .
To reference a property in the child text of an element use its Id without square brackets.

----------------------------------------------------------------------------------------
Not all element attributes will interpret this square bracket notation back into its
original literal value.
----------------------------------------------------------------------------------------
The **Installed** keyword is another property set by WiX that tells the installer to only
check this condition during an install.
----------------------------------------------------------------------------------------

A classical example: condition dependant on the value assigned to a custom property.

The condition tests whether if the property is defined and its value is set to the literal "1".
If the test fails thus the condition evaluates to FALSE then the Message is displayed.

<Property Id="myProperty" Value="0" />

<Condition Message="Value of myProperty is [myProperty]. Should be 1">
	<![CDATA[Installed OR myProperty = "1"]]>
</Condition>

----------------------------------------------------------------------------------------

Another classical example: condition dependant on the built-in NETFRAMEWORKxx property.

If NETFRAMEWORK30 is undefined then .NET Framework is not istalled thus and the condition 
evaluates to FALSE. Consequently, the message is displayed to the user during installation.

Note: for thsi condition the .wxs must reference NetFXExtension which must be added to the
project for the MSI.


<PropertyRef Id="NETFRAMEWORK30" />
<Condition Message="You must install Microsoft .NET Framework 3.0 or higher.">
	<![CDATA[Installed OR NETFRAMEWORK30]]>
</Condition>

----------------------------------------------------------------------------------------

Another example: this is how WiX define the built-in property NETFRAMEWORK30.
The value of NETFRAMEWORK30 is set by means of a specific type of AppSerach that is a 
RegistrySearch.

<Fragment>
	<Property Id="NETFRAMEWORK30" Secure="yes">
		<RegistrySearch Id="NetFramework30"
						Root="HKLM"
						Key="SOFTWARE\Microsoft\NET Framework
						Setup\NDP\v3.0\Setup"
						Name="InstallSuccess"
						Type="raw" />
	</Property>
</Fragment>

----------------------------------------------------------------------------------------

Use Hidden="yes" to prvent the value of a property from being displayed in a log when 
the MSI is run with logging mode on (i.e. msiexec /i myInstaller.msi /l*v log.log)
Marking a property as hidden does not, however, prevent it from displaying
its value in the MSI database's Property table.
Set the value from the command line or collect it from the user via the UI.
That way, it is defined dynamically and the end user can not see it by opening the
MSI package with Orca.exe.

<Property Id="MY_PASSWORD" Value="some value" Hidden="yes" />

----------------------------------------------------------------------------------------

SCOPE OF PROPERTIES - PUBLIC PROPERTIES vs SESSION PROPERTIES

Making a property public is just a matter of making its Id all uppercase.
The property MY_PASSWORD is public, while my_Password is not.

PUBLIC PROPERTIES HAVE INSTALLATION SCOPE
MY_PROPERTY will persist throughout the entire installation.
<Property Id="MY_PROPERTY" Value="my string" />

NON PUBLIC PROPERTIES HAVE SESSION SCOPE
My_Property will only last during the current session.
<Property Id="My_Property" Value="my string" />

WHEN PUBLIC ARE PROPERTIES REQUIRED TO BE PUBLIC ?
 
if you plan on using your properties when writing to the Registry, laying down files, or 
during any other act that changes the user's computer, then those properties must be made 
public.
----------------------------------------------------------------------------------------

SECURE PROPERTIES

<Property Id="MY_PROPERTY" Value="my string" Secure="yes" />

Secure properties are public properties that can be passed to the Execute phase when doing 
a managed installation with elevated privileges. An installer will prompt the user to elevate 
their privileges thus to enter the password of the built-in Administrator account. 
This is necessary before performing tasks that change directories and Registry keys outside 
the logged-in user's permissions zone any time the installer is executed in the context of 
a non admin account.

HOW TO FIND OUT WHEATHER A PROPERTY NEEDS TO BE SECURED

In the install log the RestrictedUserControl property has been set by Windows Installer.

=> Adding RestrictedUserControl property. Its value is '1'.
=> Ignoring disallowed property MYPROPERTY

The public property MYPROPERTY must be defined with Secure="yes"  to be used after the 
RestrictedUserControl property is set to 1.

SETTING ALL PROPERTIES TO SECURE

By setting EnableUserControl to 1 in the  markup, all properties will be marked as Secure.

----------------------------------------------------------------------------------------

THE TYPE OF PROPERTIES

----------------------------------------------------------------------------------------

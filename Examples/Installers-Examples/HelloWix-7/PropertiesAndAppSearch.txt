
Some facts on properties.

Declaring Properties and setting their value

Properties hold installation time data.
Properties are persisted for the duration of the whole istallation process.
Properties can be used to store and communicate state between the istallation phases.
Properties can be used to capture user input.
Properties and their values can be use in the installer logic to determine its control flow.
The default value of a property is NULL.
During the compilation process properties with NULL value are left out of teh MSI.
Properies are declared by means of the Property element.
Property can be declared and an optional value can be set as its attribute.
When a Property is declared its value does not have to be set.
The value of a declared property can be set after the declaration of the property.
Once the value of the property is set it CANNOT be changed - a build error would occur.
Properties can be set from command line.
Properties declared on the command line override those set in your WiX markup.
So, you could declare a WiX Property element in your XML to give it a default
value, then override that value from the command line.
Properties in WiX are not stronlgy typed.

----------------------------------------------------------------------------------------
When a property is set from command line it does not have to be declared in the markup.

msiexec /i myInstaller.msi PROPERTY1=100 PROPERTY2="my value"
----------------------------------------------------------------------------------------
You can clear a property by setting its value to an empty string

msiexec /i myInstaller.msi PROPERTY1=""
----------------------------------------------------------------------------------------

=============================================================================================

Referencing Properties

A property is usually referenced by attributes of another WiX element.
To reference a property in element attributes use square brackets around its Id i.e. [USERNAME] .
To reference a property in the child text of an element use its Id without square brackets.

----------------------------------------------------------------------------------------
Not all element attributes will interpret this square bracket notation back into its
original literal value.
----------------------------------------------------------------------------------------
The **Installed** keyword is another property set by WiX that tells the installer to only
check this condition during an install.
----------------------------------------------------------------------------------------

A classical example: condition dependant on the value assigned to a custom property.

The condition tests whether if the property is defined and its value is set to the literal "1".
If the test fails thus the condition evaluates to FALSE then the Message is displayed.

<Property Id="myProperty" Value="0" />

<Condition Message="Value of myProperty is [myProperty]. Should be 1">
	<![CDATA[Installed OR myProperty = "1"]]>
</Condition>

----------------------------------------------------------------------------------------

Another classical example: condition dependant on the built-in NETFRAMEWORKxx property.

If NETFRAMEWORK30 is undefined then .NET Framework is not istalled thus and the condition 
evaluates to FALSE. Consequently, the message is displayed to the user during installation.

Note: for thsi condition the .wxs must reference NetFXExtension which must be added to the
project for the MSI.


<PropertyRef Id="NETFRAMEWORK30" />
<Condition Message="You must install Microsoft .NET Framework 3.0 or higher.">
	<![CDATA[Installed OR NETFRAMEWORK30]]>
</Condition>

----------------------------------------------------------------------------------------

Another example: this is how WiX define the built-in property NETFRAMEWORK30.
The value of NETFRAMEWORK30 is set by means of a specific type of AppSerach that is a 
RegistrySearch.

<Fragment>
	<Property Id="NETFRAMEWORK30" Secure="yes">
		<RegistrySearch Id="NetFramework30"
						Root="HKLM"
						Key="SOFTWARE\Microsoft\NET Framework
						Setup\NDP\v3.0\Setup"
						Name="InstallSuccess"
						Type="raw" />
	</Property>
</Fragment>

----------------------------------------------------------------------------------------

Use Hidden="yes" to prvent the value of a property from being displayed in a log when 
the MSI is run with logging mode on (i.e. msiexec /i myInstaller.msi /l*v log.log)
Marking a property as hidden does not, however, prevent it from displaying
its value in the MSI database's Property table.
Set the value from the command line or collect it from the user via the UI.
That way, it is defined dynamically and the end user can not see it by opening the
MSI package with Orca.exe.

<Property Id="MY_PASSWORD" Value="some value" Hidden="yes" />

----------------------------------------------------------------------------------------

SCOPE OF PROPERTIES - PUBLIC PROPERTIES vs SESSION PROPERTIES

Making a property public is just a matter of making its Id all uppercase.
The property MY_PASSWORD is public, while my_Password is not.

PUBLIC PROPERTIES HAVE INSTALLATION SCOPE
MY_PROPERTY will persist throughout the entire installation.
<Property Id="MY_PROPERTY" Value="my string" />

NON PUBLIC PROPERTIES HAVE SESSION SCOPE
My_Property will only last during the current session.
<Property Id="My_Property" Value="my string" />

WHEN PUBLIC ARE PROPERTIES REQUIRED TO BE PUBLIC ?
 
if you plan on using your properties when writing to the Registry, laying down files, or 
during any other act that changes the user's computer, then those properties must be made 
public.
----------------------------------------------------------------------------------------

SECURE PROPERTIES

<Property Id="MY_PROPERTY" Value="my string" Secure="yes" />

Secure properties are public properties that can be passed to the Execute phase when doing 
a managed installation with elevated privileges. An installer will prompt the user to elevate 
their privileges thus to enter the password of the built-in Administrator account. 
This is necessary before performing tasks that change directories and Registry keys outside 
the logged-in user's permissions zone any time the installer is executed in the context of 
a non admin account.

HOW TO FIND OUT WHEATHER A PROPERTY NEEDS TO BE SECURED

In the install log the RestrictedUserControl property has been set by Windows Installer.

=> Adding RestrictedUserControl property. Its value is '1'.
=> Ignoring disallowed property MYPROPERTY

The public property MYPROPERTY must be defined with Secure="yes"  to be used after the 
RestrictedUserControl property is set to 1.

SETTING ALL PROPERTIES TO SECURE

By setting EnableUserControl to 1 in the  markup, all properties will be marked as Secure.

----------------------------------------------------------------------------------------

THE TYPE OF PROPERTIES

The properties in WiX are not strongly typed
you don't need to specify whether a property is an integer, string, or boolean.
Most of the time, you'll be setting properties by using the WiX Property element
Properties can be set from the command line 
Properties can be set dynamically with a UI control or CUSTOM ACTION
Using a Property element always implicitly casts the property as a string.
When you compare two string values, case counts.
If you prefix the comparison operator with a tilde (~), case will be ignored.

----------------------------------------------------------------------------------------

PROPERTY AS AN STRING

<Property Id="MyProperty" Value="5" />

<Condition Message="Some message if condition is false.">
	<![CDATA[MyProperty = "5"]]>
</Condition>

CASE INSENSITIVE COMPARISON

<Property Id="MyProperty" Value="sample string" />

<Condition Message="Some message if condition is false.">
	<![CDATA[MyProperty ~= "SAMPLE STRING"]]>
</Condition>

----------------------------------------------------------------------------------------

PROPERTY AS AN INTEGER 

Depending on how you reference a property WiX may interpret it as an integer.
If, in a conditional statement, you compare your property to an integer (a whole
number without quotes around it), WiX will assume that your property is an integer

<Property Id="MyProperty" Value="5" />

<Condition Message="Some message if condition is false." >
	<![CDATA[MyProperty > 3]]>
</Condition>

----------------------------------------------------------------------------------------
PROPERTY AS DECIMAL VALUE

If the property is a decimal, such as 2.0, then you can't compare it to a numeric value 
unless you put quotes around that value.

<Property Id="myNum" Value="2.0" />

<Condition Message="myNum must be > 1.">
	<![CDATA[myNum > "1"]]>
</Condition>

----------------------------------------------------------------------------------------

CHECK WHETHER A RPORTY HAS BEEN DEFINED REGARDLESS OF ITS VALUE

<Condition Message="Some message if condition is false">
	<![CDATA[MY_PROPERTY]]>	
</Condition>

----------------------------------------------------------------------------------------

PREDEFINED WINDOWS INSTALLER PROPERTIES

Some are created automatically as part of the install process i.e Installed 
Install is set when the product has already been locally installed

Some have an Id attribute already are defined for you
buT, only come to life when you instantiate them with Property elements 

----------------------------------------------------------------------------------------

IMPLIED PROPERTIES

properties that don't need to be set with a Property element
They're implied. They're set for you.
Another set of implied properties are directories i.e. ProgramFilesFolder
Any directories from the Directory elements are available as properties
Properties from Directory elements are referenced by their Id attribute.

The following properties are automatically created:
They're available to you in all phases of the install.
They can be accessed in the attributes and inner text of other elements just like normal.

• Manufacturer
• ProductCode
• ProductLanguage
• ProductName
• ProductVersion
• UpgradeCode

USE THE INSTALL LOG TO SEE THE DEFINED PROPERTIES

Taking a look at the install log will reveal many of these.

----------------------------------------------------------------------------------------

CITED PROPERTIES

Most of the properties that are built into Windows Installer aren't implied.
You have to set them explicitly with a Property element.
Contrary to custom properties the Id of cited properties must match the predefined name.
There is a fairly long list of these available.
Check the Property Refernce in the MSI SDK help file that comes with WiX
searching in it for the phrase "Property Reference".

The list of all cited properties is published at the URL below
http://msdn.microsoft.com/en-us/library/aa370905%28v=VS.85%29.aspx

Some Cited Properties - These set of CITED properties control what is displayed to the 
						user in the Add/Remove Program UI in the Control Panel. However,
						there are other cited properties related to other apsects of the 
						intsalled product.
https://msdn.microsoft.com/en-us/library/aa370905(v=VS.85).aspx#summary_information_update_properties

ARPAUTHORIZEDCDPREFIX		URL of the update channel for the application
ARPCOMMENTS					Provides Comments for Add/Remove Programs
ARPCONTACT					Provides the Contact for Add/Remove Programs
ARPINSTALLLOCATION			Fully qualified path to the application's primary folder
ARPHELPLINK					URL for technical support
ARPHELPTELEPHONE			Technical support phone numbers
ARPNOMODIFY					Prevents displaying a Change button for the product
							in Add/Remove Programs
ARPNOREMOVE					Prevents displaying a Remove
ARPNOREPAIR					Disables the Repair button in Add/Remove Programs
ARPPRODUCTICON				Identifies the icon to display for the product in Add/
							Remove Programs
ARPREADME					Provides the ReadMe for Add/Remove Programs
ARPSIZE						Estimated size of the application in kilobytes
ARPSYSTEMCOMPONENT			Prevents the application from displaying at all in
							Add/Remove Programs
ARPURLINFOABOUT				URL for the application's home page
ARPURLUPDATEINFO			URL for the application's update information

----------------------------------------------------------------------------------------

DIFFERENT TYPES OF CITED PROPERTIES

Component Location Properties
Configuration Properties
Date, Time Properties
Feature Installation Options Properties
Hardware Properties
Installation Status Properties
Operating System Properties
Product Information Properties
Summary Information Update Properties
System Folder Properties
User Information Properties

----------------------------------------------------------------------------------------

CITED PROPERTIES - HOW TO USE THEM

<Icon Id="myIcon" SourceFile="..\myIcon.ico" />
<Property Id="ARPPRODUCTICON" Value="myIcon" />

<Property Id="ARPCOMMENTS" Value="(c) Amazing Software" />

<Property Id="ARPNOREPAIR" Value="1" />

<Property Id="ARPCONTACT" Value="Nick Ramirez" />

<Property Id="ARPHELPLINK" Value="http://www.MYURL.com/AmazingSoftware/support.html"/>

<Property Id="ARPREADME" Value="http://www.MYURL.com/AmazingSoftware/readme.html" />

----------------------------------------------------------------------------------------

THE SPECIAL CASE OF THE ALLUSER CITED PROPERTY

// ALLUSERS is particulary mportant - it can be set to 1, 2 or an empty string.

// ALLUSER = 1  => Install will be performed in the per-machine context
//				=> should use this in most cases

// ALLUSER = 2  => Install will be performed in the per-user context
//				   If the user is Administrator the install will be per-machine
//			       This rules depend upon OS versions!
//				   This cannot be used if REGISTRY KEYS needs to be set for machine-level

// WARNING!
// do not change the value of the ALLUSER property as it is used by the installer to 
// determine whether the app has already been istalled on the machine.

// ALLUSER = "" => Install will be performed in the per-machine context
<Property Id="ALLUSERS" Value="1" />

The ALLUSER propety can also be set using 

<Package InstallScope="perMachine" />
<Package InstallScope="perUser" />


----------------------------------------------------------------------------------------

AppSearch

search the computer during an install for 
	files
	directories
	settings - registry or inifiles
	components

AppSearch is also the name of the MSI database table where search tasks are stored

TYPES OF APPSEARCHES


• DirectorySearch: Search for the existence or path of a directory
• FileSearch: Search for a specific file
• ComponentSearch: Search for a file by its component GUID
• RegistrySearch: Search the Windows Registry for a key
• IniFileSearch: Search inside INI files for configuration settings

All types of AppSearch are declared as child of <Property>.
The Value of <Property> will be set to the result of teh search.

----------------------------------------------------------------------------------------

DirectorySearch

check if a directory exists on a computer and, if it exists, get its path

<Property Id="DESKTOP_PATH">
	<DirectorySearch Path="C:\Documents and Settings\All Users\Desktop"
					 Depth="0"
					 AssignToProperty="yes"
					 Id="DoesDesktopExist" />
</Property>

// Here we've set the Path attribute to just Desktop and the Depth attribute to five.
// search for a folder called Desktop and go up to five directories deep to find it.
// we haven't explicitly told it where to start
// the search starts at C:\

<Property Id="DESKTOP_PATH">
	<DirectorySearch Path="Desktop"
					 Depth="5"
					 AssignToProperty="yes"
					 Id="DoesDesktopExist" />
</Property>

// It is possible to tell the the installer where to start the search by nesting the 
// DirecorySearch elements as illustrated below. The search for the Desktop folder 
// will go 3 level deaper starting at C:\Documents and Settings\All Users. In order
// for the containing property to be set to the value returned by the search the 
// innermost DirectorySearch element holds the attribute AssignToProperty="yes" while
// the outer DirecorySearch doen not.

<Property Id="DESKTOP_PATH">

	<DirectorySearch Path="C:\Documents and Settings\All Users"
					 Depth="0"
					 Id="CDrive">
				
		<DirectorySearch Path="Desktop"
						 Depth="3"
						 Id="DesktopPath"
						 AssignToProperty="yes" />
		</DirectorySearch>

</Property>

// This example illustrate a search with starting at C:\ where Depth=0 as it does not need
// to go deeper. Starting from C:\ a directory "All User" is searched up to 3 levels down 
// form C:\. Lastly, if the "C:\...\All User" forder is found the app search carries on
// looking for a "C:\...\All User\...\Desktop" up to e levels down from "C:\...\All User".
// 

<Property Id="DESKTOP_PATH">
		
		<DirectorySearch Path="C:\"
						 Depth="0"
						 Id="CDrive">
			
			<DirectorySearch Path="All Users"
							 Depth="3"
							 Id="AllUsersFolder">

					<DirectorySearch Path="Desktop"
									 Depth="3"
									 Id="DesktopFolder"
									 AssignToProperty="yes" />

					</DirectorySearch>

			</DirectorySearch>

</Property>

----------------------------------------------------------------------------------------

DirectorySearch - Path attribute

• A Windows share, such as \\myshare\myFolder
• A path relative to the top-level directory for any attached drives, such as \temp
• An absolute path, such as C:\temp
• The name of a folder, such as temp
• an environment variable (using WiX preprocessor syntax), such as $(env.ALLUSERSPROFILE)

if the installer can't find the path you set in the parent element, it will skip it and 
use its default: every attached drive's root directory i.e. C:\

----------------------------------------------------------------------------------------
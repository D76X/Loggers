
====================================================================================
HOW TO USE THE RPL AND THE WINDOW SHELL

Example 1 : PyApps/Scripts/Tests/PythonScriptsTest1/test1_words.py

1-To use it as a script

Open a shell or Power Shell window in the folder or cd to it.
On the prompt type the command > python test1_words.py.
This runs the python interpreter and pass to it the script.
Due to the fact that when the script is interpreted __main__ == '__main__'
the fetch_word() function is executed and the result are printed to the 
console by design.

2-To use it as a module.

Any .py file is a module. To use test1_words.py as a module you need the REPL. 
The are several ways to get a Python REPL.

	1-From the Windows start button find Python and launch the REPL.
	2-Use the Python REPL available in VS. Where you can also control 
	  the envirinment teh REPL is executing in.
	3-Start the REPL using the command prompt in a folder where the .py
	  is located. To start the Python REPL type > python.

	Option 2 is the most flexible.

In the REPL type >>>import test1_words. 

Once you have done this you will find the module test1_words listed in the second 
drop down which shows all the modules loaded in the REPL for the session.

Now that the module test1_words is loaded into the REPL you have access to all the
exported symbols by dotting on the name os the module i.e. test1_words.fetch_words.

If you type test1_words.fetch_words and return you get the address of the symbol,
but with test1_words.fetch_words() you execute the code for the symbol and the 
output is printed to the REPL.

A module can be unloaded and reloaded from the REPL.
https://stackoverflow.com/questions/437589/how-do-i-unload-reload-a-python-module

del test1_words

-------------------------------------------------------------------------------------

Example 2 : PyApps/Scripts/Tests/PythonScriptsTest1/test2_words.py

This script is written so that can be used as a module and as a script and when used
as a module a main() is provided as entry point to test the functionality of the 
module.

1- To use it as script 

As in Example 1 if you just type 

> python test2_words.py 

this executes the main() as it is __name__ == '__main__' when the files is interpreted
by Python.

2- To use it a module

In the REPL

>>>import test2_words

This imports all the symbols in the module into teh REPL. You can access all of them
by dotting on the name of the module i.e. test2_words.fetch_words(). There is also a 
main() function that is provided to test the module as a whole as if it where run as
as a script - sometimes this is useful to have.

====================================================================================
PIP

How to run PIP

In the console and NOT in the REPL type pip to execute pip.exe as long it is in the 
System Path. In the REPL you may import pip as (import pip).

https://stackoverflow.com/questions/33193374/how-do-i-run-pip-on-python-for-windows

Most useful PIP commands

1-pip list
2-pip show (name fo the package you want info of)
3-pip search (name of package...)

4-pip freeze => requirements.txt

	prints a list of all currently installed packages and their versions and it does 
	so in a format that pip itself can parse later. This mechanism normally used to
	produce a file named *requirements.txt*.

	The output of the pip freeze can be copied into a requirements.txt file and edited
	i.e. the specific versions may be removed and some of the installed packages too
	according to the case.

5-pip install -r requirements.txt

	This installs all the packages and dependencies in requiremets.txt

Note: The requirements.txt mechanism is designed only for setting up the packages on a
	  developmet machine, not an end user's!

https://pip.pypa.io/en/stable/reference/pip_install/#pip-install
https://stackoverflow.com/questions/5226311/installing-specific-package-versions-with-pip
6-pip install (name of the package to install)
  pip install MySQL_python==1.2.2
  pip install 'stevedore>=1.3.0,<1.4.0'  => notice the '...' which are necessary
  pip install -Iv MySQL_python==1.2.2 (-I to ignore previous version)

https://pip.pypa.io/en/stable/reference/pip_uninstall/
7-pip uninstall (name of the package to uninstall)
  pip uninstall -r requirements.txt => clean up!

Note: to install and/or uninstall packages you may need to run the cmd as admin/sudo.
====================================================================================

VIRTUALENV

1-pip install virtualenv (install virtualenv globally)

Create a virtual environment from the cmd in a folder (env or .virtualenv)
Normally on Windows the folder is env and on Linux it is .virtualenv
2-virtualev (name of the virtual environment to create - normally the name of the project)

Activate a virtual enviroment from the cmd
3 Linux -.(name of the VE)/bin/activate 
The prompt change to (name of the VE)

3 Windows - myproject\Scripts\activate
For example
>cd C:\GitHub\Loggers\PyApps\Scripts\Tests\PythonScriptsTest1\env\Scripts
>activate
This runs the script activate.py and the prompt changes to

(env) C:\GitHub\Loggers\PyApps\Scripts\Tests\PythonScriptsTest1\env\Scripts

to signal that python is now running on the virtual environment created for the 
project. You can now issue commands, import modules, etc. and all is done in the 
VE.

Deactivate a VE
4 Linux- .(name of the VE)/bin/deactivate
4 Windows- (name of the VE)/.../Scripts/deactivate

When a VE is activate the system path changes to use the path ...env.
You can easily verify this in two ways

--------------------------------------------

Check sys.path

1-In the cmd activate a VE
2-type >python to start the REPL in the cmd
3-type >>> import sys
4-type >>> sys.path 
--------------------------------------------

====================================================================================

====================================================================================
HOW TO USE THE REPL AND THE WINDOW SHELL

Example 1 : PyApps/Scripts/Tests/PythonScriptsTest1/test1_words.py

1-To use it as a script

Open a shell or Power Shell window in the folder or cd to it.
On the prompt type the command > python test1_words.py.
This runs the python interpreter and pass to it the script.
Due to the fact that when the script is interpreted __main__ == '__main__'
the fetch_word() function is executed and the result are printed to the 
console by design.

2-To use it as a module.

Any .py file is a module. To use test1_words.py as a module you need the REPL. 
The are several ways to get a Python REPL.

	1-From the Windows start button find Python and launch the REPL.
	2-Use the Python REPL available in VS. Where you can also control 
	  the envirinment teh REPL is executing in.
	3-Start the REPL using the command prompt in a folder where the .py
	  is located. To start the Python REPL type > python.

	Option 2 is the most flexible.

In the REPL type >>>import test1_words. 

Once you have done this you will find the module test1_words listed in the second 
drop down which shows all the modules loaded in the REPL for the session.

Now that the module test1_words is loaded into the REPL you have access to all the
exported symbols by dotting on the name os the module i.e. test1_words.fetch_words.

If you type test1_words.fetch_words and return you get the address of the symbol,
but with test1_words.fetch_words() you execute the code for the symbol and the 
output is printed to the REPL.

A module can be unloaded and reloaded from the REPL.
https://stackoverflow.com/questions/437589/how-do-i-unload-reload-a-python-module

del test1_words

-------------------------------------------------------------------------------------

Example 2 : PyApps/Scripts/Tests/PythonScriptsTest1/test2_words.py

This script is written so that can be used as a module and as a script and when used
as a module a main() is provided as entry point to test the functionality of the 
module.

1- To use it as script 

As in Example 1 if you just type 

> python test2_words.py 

this executes the main() as it is __name__ == '__main__' when the files is interpreted
by Python.

2- To use it a module

In the REPL

>>>import test2_words

This imports all the symbols in the module into teh REPL. You can access all of them
by dotting on the name of the module i.e. test2_words.fetch_words(). There is also a 
main() function that is provided to test the module as a whole as if it where run as
as a script - sometimes this is useful to have.

====================================================================================
PIP

How to run PIP

In the console and NOT in the REPL type pip to execute pip.exe as long it is in the 
System Path. In the REPL you may import pip as (import pip).

https://stackoverflow.com/questions/33193374/how-do-i-run-pip-on-python-for-windows

Most useful PIP commands

1-pip list
2-pip show (name fo the package you want info of)
3-pip search (name of package...)

4-pip freeze => requirements.txt

	prints a list of all currently installed packages and their versions and it does 
	so in a format that pip itself can parse later. This mechanism normally used to
	produce a file named *requirements.txt*.

	The output of the pip freeze can be copied into a requirements.txt file and edited
	i.e. the specific versions may be removed and some of the installed packages too
	according to the case.

5-pip install -r requirements.txt

	This installs all the packages and dependencies in requiremets.txt

Note: The requirements.txt mechanism is designed only for setting up the packages on a
	  developmet machine, not an end user's!

https://pip.pypa.io/en/stable/reference/pip_install/#pip-install
https://stackoverflow.com/questions/5226311/installing-specific-package-versions-with-pip
6-pip install (name of the package to install)
  pip install MySQL_python==1.2.2
  pip install 'stevedore>=1.3.0,<1.4.0'  => notice the '...' which are necessary
  pip install -Iv MySQL_python==1.2.2 (-I to ignore previous version)

https://pip.pypa.io/en/stable/reference/pip_uninstall/
7-pip uninstall (name of the package to uninstall)
  pip uninstall -r requirements.txt => clean up!

Note: to install and/or uninstall packages you may need to run the cmd as admin/sudo.
====================================================================================

VIRTUALENV

1-pip install virtualenv (install virtualenv globally)

Create a virtual environment from the cmd in a folder (env or .virtualenv)
Normally on Windows the folder is env and on Linux it is .virtualenv
2-virtualev (name of the virtual environment to create - normally the name of the project)

Activate a virtual enviroment from the cmd
3 Linux -.(name of the VE)/bin/activate 
The prompt change to (name of the VE)

3 Windows - myproject\Scripts\activate
For example
>cd C:\GitHub\Loggers\PyApps\Scripts\Tests\PythonScriptsTest1\env\Scripts
>activate
This runs the script activate.py and the prompt changes to

(env) C:\GitHub\Loggers\PyApps\Scripts\Tests\PythonScriptsTest1\env\Scripts

to signal that python is now running on the virtual environment created for the 
project. You can now issue commands, import modules, etc. and all is done in the 
VE.

Deactivate a VE
4 Linux- .(name of the VE)/bin/deactivate
4 Windows- (name of the VE)/.../Scripts/deactivate

When a VE is activate the system path changes to use the path ...env.
You can easily verify this in two ways

--------------------------------------------

Check sys.path

1-In the cmd activate a VE
2-type >python to start the REPL in the cmd
3-type >>> import sys
4-type >>> sys.path 
--------------------------------------------

====================================================================================

Docstrings for functions

def fetch_words():
    """fetches some text from a test URL and stick it into a list word by word"""


def print_items(items):
    """
    prints a list of strings to the console
    
    Args:
        items: the collection of items to print.

    Returns:
        nothing.
    """
    for item in items:
        print(item)

These are all examples of Docstrings. Docstrings are useful to query how a function 
declared in a module works. In order to query for a docstring do something like the
following in the REPL.

>>> import test2_words
>>> help(test2_words.print_items)

You get the following output

Help on function print_items in module test2_words:

---------------------------------------------------
print_items(items)
    prints a list of strings to the console.
    
    Args:
        items: the collection of items to print.
    
    Returns:
        nothing.
---------------------------------------------------

This is also the recommended style of Docstring.

------------------------------------------------------------------------------------

Docstring for modules

"""
This is the docstring for this module.

Usage:
    its is used to showcase and test some basic aspect of Python and its 
    toolchain.
"""

-------------------------------------------------

It is also possible to obtain help on a module.

>>> import test2_words
>>> help(test2_words)
Help on module test2_words:

NAME
    test2_words - This is the docstring for this module.

DESCRIPTION
    Usage:
        its is used to showcase and test some basic aspect of Python and its 
        toolchain.

FUNCTIONS
    fetch_words()
        fetches some text from a test URL and stick it into a list word by word
    
    main()
        this is the main funtion of this module
    
    print_items(items)
        prints a list of strings to the console.
        
        Args:
            items: the collection of items to print.
        
        Returns:
            nothing.

====================================================================================

The Shebang
#!/usr/bin/env python3

https://app.pluralsight.com/player?course=python-fundamentals&author=robert-smallshire&name=python-fundamentals-m03-modularity&clip=9&mode=live
https://stackoverflow.com/questions/6908143/should-i-put-shebang-in-python-scripts-and-what-form-should-it-take

Place the special line above on top of the module file mymodule.py. This is an 
instruction that makes a .py file executable in the console without having to invoke
the Python interpreter first passing the name of the module/script as its argument.

For example

> python mymodule.py
or
> python myscript.py

become simply

>mymodule.py
>myscript.py
====================================================================================

Pretty Printing module example
https://docs.python.org/3.3/library/pprint.html

>>> from pprint import pprint as pp
>>> from test5_classes_functions_dictionaries import *
>>> f = Flight("AB1234", Aircraft("REG123","AibsusX",22,6))
>>> f.allocate_seat('12A','Davide Spano')
>>> f.allocate_seat('12A','Davide Spano')
>>> f.allocate_seat('15F','Cinzia Nava')
>>> f.allocate_seat('15E','Lorentz Spano')
>>> f.allocate_seat('E27','Mark Truss')
>>> pp(f._seating)

>>> from test7_polymorphism_duck_typing import *
>>> f, g = create_test_flights()
>>> f.aircraft_model()
>>> g.aircraft_model()
>>> f.num_available_seats()
>>> g.num_available_seats()

====================================================================================

MODULEs AND PACKAGEs AND sys.path

1-Any .py file is a module.
  A module may be made globally available to the Python interpreter when its path 
  is added to sys.path.

2-to add a path to sys.path directly
>>> import sys
>>> sys.path.append('C:\....\folder whare your module(s) are')

3-there is another way to add a modules to sys.path that does require direct 
  mainipulation of sys.path. The PYTHONPATH environment variable is a set of 
  path added to sys.path when Python starts. It uses the same format of the 
  OS environment variable PATH.

  In Windows
  set PYTHONPATH=%PYTHONPATH%;C:\My_python_lib
  Or use the GUI...
  https://stackoverflow.com/questions/3701646/how-to-add-to-the-pythonpath-in-windows-7

4- to test whether a folder is in sys.path
>>>import sys
>>>[p for p in sys.path if 'folder_name' in p]

5-Once a module in in sys.path it is globally available to Python interpreter and
  to use it at the REPL or in a script just import it as in teh following examples
  import module_name
  import module_name as m
  from module_name import *
  from module_name import a_function
  etc.

------------------------------------------------------------------------------------
PACKAGES

Packages are themeselves modules.

6-Packages are directories with a __init__.py in it and as many modules as you like.

7-The file __init__.py is often called the package init file, and it is what make a 
  package also a module.

8-A package is a special kind of module as it can contain other modules including 
  other packages.

9-For a Package to globally available to Python the path to the directory of the 
  Package must be in sys.path.

---------------------------------------------
Test of a sample package in the console. 
Shows how to import a package into the REPL.
Refs
https://app.pluralsight.com/player?course=python-beyond-basics&author=austin-bingham&name=python-beyond-basics-m01&clip=2&mode=live
---------------------------------------------

C:\GitHub\Loggers\PyApps\Examples\Packages
Python 3.6.3 (v3.6.3:2c5fed8, Oct  3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import Package1
>>> Package1.__file__
'C:\\GitHub\\Loggers\\PyApps\\Scripts\\Packages\\Package1\\__init__.py'

The PackageExample.__file__ points to the __init__ of the package's directory. This
is the file that is actually imported into teh Python runtime when the module/apckage
is imported. The __init__ is executed as any other module but it is executed first.


---------------------------------------------
Test of a sample package in the console. 
Read the file that defines the class Reader
Refs
https://app.pluralsight.com/player?course=python-beyond-basics&author=austin-bingham&name=python-beyond-basics-m01&clip=2&mode=live
---------------------------------------------

C:\GitHub\Loggers\PyApps\Examples\Packages
Python 3.6.3 (v3.6.3:2c5fed8, Oct  3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import Package1.reader
>>> Package1.__file__
'C:\\GitHub\\Loggers\\PyApps\\Scripts\\Packages\\Package1\\__init__.py'
>>> r=Package1.reader.Reader('Package1/reader.py')
>>> r.read()
"....THE CONTENT OF THE FILE reader.py..."
>>>r.close()


---------------------------------------------
Test of a sample package in the console. 
Read the file that defines the class Reader
Refs
https://app.pluralsight.com/player?course=python-beyond-basics&author=austin-bingham&name=python-beyond-basics-m01&clip=2&mode=live
---------------------------------------------
C:\GitHub\Loggers\PyApps\Examples\Packages>python
Python 3.6.3 (v3.6.3:2c5fed8, Oct  3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import Package1.module2
>>> Package1.__file__
'C:\\GitHub\\Loggers\\PyApps\\Examples\\Packages\\Package1\\__init__.py'
>>> one, two = Package1.module2.create_crazy_stuff()
>>> one.tell_me_how_crazy_you_are()
I am crazy at level 7
>>> two.tell_me_how_crazy_you_are()
I am crazy at level all out
>>>

---------------------------------------------
Test of a sample package in the console. 
Read the file that defines the class Reader
Refs
https://app.pluralsight.com/player?course=python-beyond-basics&author=austin-bingham&name=python-beyond-basics-m01&clip=2&mode=live
---------------------------------------------
C:\GitHub\Loggers\PyApps\Examples\Packages>python
Python 3.6.3 (v3.6.3:2c5fed8, Oct  3 2017, 18:11:49) [MSC v.1900 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import Package1.module2
>>> Package1.__file__
'C:\\GitHub\\Loggers\\PyApps\\Examples\\Packages\\Package1\\__init__.py'
>>> one, two = Package1.module2.create_crazy_stuff()
>>> one.tell_me_how_crazy_you_are()
I am crazy at level 7
>>> two.tell_me_how_crazy_you_are()
I am crazy at level all out
>>> import Package1.module1
>>> Package1.module1.printSomething()
somethig!
>>>

====================================================================================

----------------------------
Test test8_callable_objects
----------------------------
In the REPL for PythonScriptsTest1 do the following

>>> import socket
>>> socket.gethostbyname('google.com')
'172.217.23.14'
>>> socket.gethostbyname('sixty-north.com')
'93.93.131.30'
>>> 

Then compare it to the following

>>> import socket
>>> socket.gethostbyname('google.com')
'172.217.23.14'
>>> socket.gethostbyname('sixty-north.com')
'93.93.131.30'
>>> from test8_callable_objects import Resolver
>>> resolver('sixty-north.com')
'93.93.131.30'
>>> resolver('google.com')
'216.58.210.46'
>>> resolver._cache
{'sixty-north.com': '93.93.131.30', 'google.com': '216.58.210.46'}
>>> 

----------------------------------------------------------
Test in the REPL using the module level test function
----------------------------------------------------------
>>> import test8_callable_objects as t
>>> t.test_resolver()
{'google.com': '216.58.213.110', 'sixty-north.com': '93.93.131.30', 'bbc.co.uk': '151.101.64.81'}
>>> import pprint as pp
>>> pp.pprint(t.test_resolver())
{'bbc.co.uk': '151.101.64.81',
 'google.com': '216.58.213.110',
 'sixty-north.com': '93.93.131.30'}
>>> 

====================================================================================

Use of the timeit module
https://docs.python.org/2/library/timeit.html

----------------------------------------------------------------------------------
Example1
https://stackoverflow.com/questions/8220801/how-to-use-timeit-module
----------------------------------------------------------------------------------

In the REPL we time how long it takes to generate 1000 random chars and sort them. 

>>> import timeit
>>> setup = '''
... import random
... 
... random.seed('slartibartfast')
... s = [random.random() for i in range(1000)]
... timsort = list.sort
... '''
>>> print(min(timeit.Timer('a=s[:]; timsort(a)', setup=setup).repeat(7, 1000)))
0.21482576029353018
>>> 

----------------------------------------------------------------------------------
Example2 : test009_timeit.py
https://docs.python.org/2/library/timeit.html
----------------------------------------------------------------------------------
>>> import timeit
>>> timeit.timeit("t.function_to_test()", setup="import test9_timeit as t")
11.92169682342347

----------------------------------------------------------------------------------
Example3 : test010_timeit.py
https://docs.python.org/2/library/timeit.html
Like test009_timeit.py but the timing function is exposed on the module.
----------------------------------------------------------------------------------
>>> import test010_timeit
>>> test010_timeit.time_of_function_to_test()
0.04928050341063623
>>> 
----------------------------------------------------------------------------------

----------------------------------------------------------------------------------
Example4 : test008_timeit.py
https://docs.python.org/2/library/timeit.html
----------------------------------------------------------------------------------
>>> import test008_callable_objects
>>> test008_callable_objects.time_resolver_without_and_with_caching()
0.5042847158598106
0.48669231602153795
0.4976048976097829
0.49145116699946656
{'google.com': '216.58.204.14', 'sixty-north.com': '93.93.131.30'}
----------------------------------------------------------------------------------

====================================================================================
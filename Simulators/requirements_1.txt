PROJECT: Simulator

=========================================================================================================

Intro

Read carefully, you might not understand all of it at once. However, proceed step by step
and apply what you know in a rational fashion. Try to understand what you are doing and 
the steps you take. Use a scientific approach to solve problems. Document yourself on 
the parts into which the work may be brocken down without getting stuck. 

Some work and progress must be made at all costs!

=========================================================================================================

What is it all about?

We need to code a simulator application that generates numbers as if it were a real data logger. 
This application will be in the form of an executable named loggersim.exe. All that we need for 
the moment is a simple console application that generate numbers and makes them "available" to 
"consumers" or "listeners". This means that in some way the loggersim.exe is fired up and starts 
producing numbers that it sends to one or more "end points". Consumers for this datastream will 
have to fine an endpoint and read the data from it and do whatever they want to do with it. 

To the consumers these stream of data is exaclty that could be produced by a real data logger, 
they just won't care. For example an obvious consumer could be a GUI that displays that data to 
the user as it is read from the endpoint. Another example might be a Windows Service that connects 
to the endpoint, reads the data from the stream and relays it to somewhere else in a different 
format.  

This means that the endpoint must be easy to reach and be read by the consumers. 

To achieve this goal we will use TCP/IP.

The simulator will use some algorithm to create a fake stream of data that looks the same as that of 
a data logger, then it will use some piece of software that takes this stream of numbers and pushes it 
to a TCP/IP endpoint.

Computers and any piece of electronics that have an ETHERNET port on it can communicate over TCP/IP. 
As with real telephone calls and home addresses for letters communication between two points can be done 
once the two parties know each other address. 

With TCP/IP is the same. The device or simulator that produces the datastream will send it to a TCP/IP 
address and then the consumer will open its own TCP/IP endpoint and connect this to the endpoint of the 
producer and read the stream of data. TCP/IP is biderictional and duplex, that is, once the two endpoints 
connect the data can flow in either way at any time. However, for our case here, what we care for is the 
flow of data that goes from the producer (logger or simulator) to the consumer.  

How the bits of info travel from one end point to the other is all taken care by the TCP/IP protocol that 
in most cases is provided. We do not need to know anything about TCP/IP as it has already done by someone 
else, instead we need to know the following

1-How to obtain TCP/IP endpoint to send data to so that it can be available to other endpoints over the 
  network.
2-How to push the data produced by the simulator or the logger to the TCP/IP endpoint we have obtained 
  in order to send it over the network
3-How to obtain TCP/IP endpoint in order to listen to it and read from it the data stream. 

In accordance with The Open Systems Interconnection model (OSI model i.e.. https://en.wikipedia.org/wiki/OSI_model)

The OS [operating system] comes with the TCP/IP protocol implemented in it. It is a piece of low-level software which 
implemets the TRANSOPRT LAYER of the OSI model. The TRANSPORT LAYER implementation deals with the transmission and reception 
of data that is conveyed over the NETWORK LAYER. Normally the NETWORK LAYER specifies how data is exchanged between two
physical endpoint connected by a specific medium. In any applications the NETWORK LAYER is the ETHERNET protocol or a WIRELESS
equivalent whereby the data is exachanged in the form of FRAMES. Such frames have a specific agreed format and can be decomposed 
in parts each having a specific purpose. One of these parts is the PAYLOAD which is the actually data content wrapped in the 
frame. The TRANSPORT LAYER (TCP/IP) specifies what the PAYLOAD should look like and how to compose several payloads to construct
and deconstruct a MESSAGE. 

---------------------------------------------------------------------------------------------------------------------------------

The simulator loggersim.exe will have to find a way to open a TCP/IP endpoint on the OS of the PC it runs on and push the stream
of fake data it creates to this TCP/IP endpoint. 

---------------------------------------------------------------------------------------------------------------------------------

To test that the loggersim.exe works we then must build some kind of consumer. This consumer will have to open a TCP/IP endpoint 
that connects to the TCP/IP endpoint where the data stream is published and reads the stream of data from it. It then can either 
display the data i.e. on the console or save the data to a file or else.

To sumarise 

-1 open a TCP/IP end point EP-A to send data to
-2 produce stream of data using an algorithm
-3 push the data the EP-A
-4 create and open TCP/IP EP-B
-5 connect EP-B to EP-A
-6 read the data from EP-A to EP-B
-7 collect the data received on EP-B and so something with it i.e. display it to the console

=====================================================================================================================================

What is the difference loggersim.exe (the simulator) and the real datalogger?

The real datalogger does not use an algorithm to create the data, it actually samples/acquires it from the real world.
Once the data is read from the real world it must get to a TCP/IP endpoint is some way in order to become available to any consumers. 

There are several ways data produced from a data logger may become available to a PC.

1-USB - The logger is also or incorporates a USB device which can be connected to a PC via USB cable. 

On the PC there will be a low-level piece of software (driver) that knows how to read data from a USB device. 
Normally a USB device interfaces to a PC via a USB endpoint which is DUPLEX that is to day that the information can flow in either way 
at the same time so from the PC to the USB device and from the USB device to the PCB. The physical connection between USB device and PC 
is always a USB cable as this is part of teh USB standard. 

2-ETHERNET PORT 

The logger has an ethernet port and can be connected straigth into a router on the local network. When this happens the microcontroller 
inside the logger knows how to create a TCP/IP endpoint on the network and send the data it reads from the real world to the TCP/IP EP.
Consumers at this point need only to create their TCP/IP ned points and connect them to that of the provided by the data logger on the 
network and read the data from it.


From the point of view of any consumer the data logger is just an end point to which they need to connect to and read data from.

====================================================================================================================================== 

Resources you must look at how to get started and why


================================================================================================
1-Command Line Parser

https://commandline.codeplex.com/wikipage?title=Quickstart&referringTitle=Documentation 

As we are going to write a console app for the loggersim.exe we need a nice way of configuring it 
when it starts. For example, we might want to tell it to run for 10 seconds, create 100 samples of values between 1 and 1000 and repeat 3 times and so on.

This can be done in several ways, however it might require a large amount of effort to design 
all the code that parses the commands. This library does a good job already, thus it si worthwile
to make use of it.

For example we would like to achieve the following result.

-The user types in the console (console propmt) something like the following.

-----------------------------------------------------------------------------------------------
>>loggersim -port:3456 -samples:100  -from:0 -to:255 -timeinterval:25 -repeat:3 -signal:random
-----------------------------------------------------------------------------------------------

And loggersim.exe does the following

-Sets up a communication socket on tcp://localhost:3456
-Generates RANDOM samples of value between 0 and 255 as binary values
-The values are sent to teh socket tcp://localhost:345
-Each sample follows the previous one at 25 ms intervals
-A total of 3 * 100 samples will be generated
-loggersim.exe stops generating samples and wait for the netx command at the prompt

-----------------------------------------------------------------------------------------------
>>loggersim -help
-----------------------------------------------------------------------------------------------

provides a printout with the help for all the available command

-----------------------------------------------------------------------------------------------
>>loggersim -help {commandname}
-----------------------------------------------------------------------------------------------

provides a printout with the help for the command {commandname}

-----------------------------------------------------------------------------------------------
>>loggersim -version
-----------------------------------------------------------------------------------------------

provides a printout with the version of the loggersim.exe application

  
Start with playing with this library and see wheter these objectives can be achieved (they should).
At first focus on getting the command parser to work. There is no need to actually use ZEROMQ
to generate the sample for the TCP socket, at least initially. All that is required to start with 
is that we can use the this library to feed loggersim.exe with some instructions and get it to do
something useful as a result of our istructions.

For example

------------------
loggersim -help

prints something to the prompt
------------------

---------------------------------------------------------
loggersim -help port

prints the text help for the command "port" to the prompt
----------------------------------------------------------

---------------------------------------------------------
loggersim -port:3456 -samples:100 

prints the message "Opened tcp://localhost:3456"
prints 100 numbers to the console
---------------------------------------------------------
 
Read the quickstart for the library 
https://commandline.codeplex.com/wikipage?title=Quickstart

Read the documentation for the library 
https://commandline.codeplex.com/documentation

create a solution with the console application loggersim and add the references it needs to use 
the Command Line Parser Library. Preferebly download and build the source code of the library as 
part of the same solution. The instruction on how to do it are on the Quickstart page. 

https://commandline.codeplex.com/wikipage?title=Quickstart


This should get you started.

================================================================================================
2-ZeroMQ

http://zguide.zeromq.org/page:all#Getting-the-Message-Out

================================================================================================-
3-Messaging techniques - pluralsight course

https://app.pluralsight.com/library/courses/message-queue-fundamentals-dotnet/table-of-contents

In particular the examples on how to use ZEROMQ.
================================================================================================














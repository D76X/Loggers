<Window x:Class="LogXtreme.WinDsk.TestDocking.Prism.Shell"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:LogXtreme.WinDsk.TestDocking.Prism"
        xmlns:prism="http://prismlibrary.com/"
        xmlns:inf="clr-namespace:LogXtreme.WinDsk.Infrastructure;assembly=LogXtreme.WinDsk.Infrastructure"
        mc:Ignorable="d"
        Title="{Binding Path=Id, StringFormat='Test Docking with Prism Shell v2 - Shell {0}'}">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"
                           MinHeight="10" />
            <!--
            to simplify the logic for navigation in this demo we 
            embed the menu in the shell hence the extra row below.
            This spares the pain to have to create the menu dinamically
            from the modules.
            -->
            <RowDefinition Height="Auto"
                           MinHeight="10" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto"
                           MinHeight="10" />
        </Grid.RowDefinitions>
        <ContentControl prism:RegionManager.RegionName="{x:Static inf:RegionNames.RegionMainMenu}"
                        Grid.Row="0" />
        <DockPanel Grid.Row="1" x:Name="menuEmbeddedInTheShell">
            <Menu DockPanel.Dock="Top">
                
                <!--
                When a new Shell is open the command must tell the 
                shell service which view the new shell is supposed 
                to set as active view as soon as teh shell is ready.
                This view must be one of the views that are registered
                by the modules of the applications. The simplest is 
                to set the ContentView from the ContentModule as the
                active view for the nely created Shell. This is done
                by setting CommandParameter="ContentView" which is 
                eventually passed down to the ShellService.
                -->
                <MenuItem Header="Open Shell"
                          Command="{Binding OpenShellCommand}"
                          CommandParameter="ContentView" />
                
                <MenuItem Header="Open Device Tree"
                          Command="{Binding NavigateCommand}"
                          CommandParameter="DeviceTreeView" />
                <MenuItem Header="Open Data Tree"
                          Command="{Binding NavigateCommand}"
                          CommandParameter="DataTreeView" />
                <MenuItem Header="Open Data Grid"
                          Command="{Binding NavigateCommand}"
                          CommandParameter="DataGridView" />
                <MenuItem Header="Open Plotting"
                          Command="{Binding NavigateCommand}"
                          CommandParameter="PlottingView" />
            </Menu>
        </DockPanel>
        <!--
        The Shell hosts the region named RegionNames.RegionContent. When a new shell is created
        the module that registers its view with the region named RegionNames.RegionContent gets 
        to inject its view into the region. This module is by convention the ContentModule.
        -->
        <ContentControl prism:RegionManager.RegionName="{x:Static inf:RegionNames.RegionContent}"
                        Grid.Row="2" />
        <ContentControl prism:RegionManager.RegionName="{x:Static inf:RegionNames.RegionStatusBar}"
                        Grid.Row="3" />
    </Grid>
</Window>
